import unittest
import buysideAnswers as ba


class TestBuyside(unittest.TestCase):

    def test_countUppercase(self):
        count = ba.countUppercase('file1.txt')
        self.assertEqual(88, count)

    def test_fibonacci(self):
        self.assertEqual(17711, ba.fibonacci(22))

    def test_fibonacci_large(self):
        # Hint Do not use recursion
        self.assertEqual(

            ba.fibonacci(6000))

    def test_transformdata(self):
        data = [
            {
                "id": 187,
                "name": "a"
            },
            {
                "id": 22,
                "name": "b"
            },
            {
                "id": 8,
                "name": "c"
            },
            {
                "id": 76,
                "name": "d"
            }
        ]
        self.assertListEqual([8, 22, 76, 187], ba.extract_ids(data))

    def test_transformdata2(self):
        """
        Look at the expected result and transform the data object
        to match.
        :return:
        """
        data = [
            {
                "id": 187,
                "name": "a"
            },
            {
                "id": 22,
                "name": "b"
            },
            {
                "id": 8,
                "name": "c"
            },
            {
                "id": 76,
                "name": "d"
            }
        ]
        self.assertListEqual([(8, 'd'), (22, 'c'), (76, 'b'), (187, 'a')],
                             ba.transformdata2(data))

    def test_merge(self):
        a = {
            'name': 'james',
            'age': 33,
            'hometown': 'Miami'
        }

        b = {
            'name': 'James',
            'age': 33,
            'hometown': 'Ohio',
            'shoes': 'nike'
        }

        self.assertDictEqual({
            'name': 'james',
            'age': 33,
            'shoes': 'nike',
            'hometown': 'Miami'
        }, ba.mergeDicts(a, b))


if __name__ == '__main__':
    unittest.main()
